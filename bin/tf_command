#!/bin/sh

set -e

BASEDIR=$(dirname "$0")

wrap() {
  if [[ $(echo "$1" | wc -l) -gt ${TF_ACTION_WRAP_LINES:-20} ]]; then
    echo "
<details><summary>Show Output</summary>
\`\`\`
$1
\`\`\`
</details>
"
else
    echo "
\`\`\`
$1
\`\`\`
"
fi
}

COMMAND=""

parse_options() {
  # set -- "$@"
  local ARGN="$#"
  while [ "$ARGN" -ne 0 ]
  do
    case $1 in
      --command)
      COMMAND="$2"
      shift
      shift
      ;;
      ?*)
      echo "Error: Unknown option. $1"
      usage
      exit 0
      ;;
    esac
    ARGN=$((ARGN-1))
  done
}

parse_options "$@"

echo "#### Starting terraform $COMMAND ####"
echo "### Region: $AWS_REGION ###"
echo "### Options: $* ###"

set +e
OUTPUT=$(sh -c "terraform "$COMMAND" -auto-approve -input=false -no-color $*" 2>&1)
SUCCESS=$?
echo "$OUTPUT"
set -e

PR_DATA=$(cat "$GITHUB_EVENT_PATH" | jq -r .pull_request)
COMMENT=""

if [ "$SUCCESS" -ne 0 ]; then
  echo "#### Terraform $COMMAND failed ####"

  # Create deployment failure status
  "${BASEDIR}"/deployment_create_status failure

  # If not a PR exit
  if [ "$PR_DATE" = "null" ]; then
    exit "$SUCCESS"
  fi

  # Build the PR comment
  OUTPUT=$(wrap "$OUTPUT")
  COMMENT="#### \`terraform $COMMAND\` Failed
$OUTPUT
*Workflow: \`$GITHUB_WORKFLOW\`, Action: \`$GITHUB_ACTION\`*"
else
  echo "#### Terraform $COMMAND succeded ####"

  exit "$SUCCESS"
fi

# Post the comment
PAYLOAD=$(echo '{}' | jq --arg body "$COMMENT" '.body = $body')
COMMENTS_URL=$(cat ""$GITHUB_EVENT_PATH"" | jq -r .pull_request.comments_url)
curl -s -S -H "Authorization: token $GITHUB_TOKEN" --header "Content-Type: application/json" --data "$PAYLOAD" "$COMMENTS_URL" > /dev/null

exit "$SUCCESS"
